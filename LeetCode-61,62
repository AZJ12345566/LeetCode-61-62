class Solution {
/*
61、旋转链表
给你一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。
*/
  public ListNode rotateRight(ListNode head, int k) {
    if(head == null || head.next == null || k == 0) {
      return head;
    }
    int n = 1;
    ListNode iter = head;
    while(iter.next != null) {
      iter = iter.next;
      n++;
    }
    int add = n - k % n;
    if(n == add) {
      return head;
    }
    iter.next = head;
    while(add-- > 0) {
      iter = iter.next;
    }
    ListNode ret = iter.next;
    iter.next = null;
    return ret;
  }
/*
62、不同路径
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。
问总共有多少条不同的路径？
*/
  public int uniquePaths(int m, int n) {
    int[][] dp = new int[m][n];
    for(int i = 0; i < m; i++) {
      dp[i][0] = 1;
    }
    for(int i = 0; i < n; i++) {
      dp[0][i] = 1;
    }
    for(int i = 1; i < m; i++) {
      for(int j = 1; j < n; j++) {
        dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
      }
    }
    return dp[m - 1][n - 1];
  }
}
